{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","defaultProps","aboutText","TextForm","useState","text","setText","wordCount","word","arr","split","ct","i","length","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","text1","toUpperCase","showalert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","new_word","slice","Alert","height","alert","charAt","msg","App","setMode","setalert","showAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e06c4cf5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid mx-3\">\r\n    <a className=\"navbar-brand mx-3\" href = \"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        </li>\r\n        <li className=\"nav-item\">\r\n        </li>\r\n      </ul>\r\n        {/* <form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'dark' ? 'Light' :  'Dark'} Mode</label>\r\n        </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\nNavbar.propTypes ={\r\n  title : PropTypes.string.isRequired,\r\n  aboutText : PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : 'Set title here',\r\n    aboutText : 'About text here'\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState(\"\");\r\n    const UpperCsClick = ()=>{\r\n       \r\n        let text1 = text.toUpperCase();\r\n        setText(text1);\r\n        props.showalert(\"Converted Text to UpperCase\",\"success\");\r\n    };\r\n    const wordCount = (word)=>{\r\n        let arr = word.split(/\\s+/); let ct = 0;\r\n        for(let i=0;i<arr.length;i++)\r\n        {\r\n            if(arr[i].length !== 0) ct++;\r\n        }\r\n        return ct;\r\n    }\r\n    const remove_Extra_Spaces = ()=>{\r\n        let arr = text.split(/\\s+/); \r\n        let new_word=\"\";\r\n        for(let i=0;i<arr.length;i++)\r\n        {\r\n            if(arr[i].length !== 0)  new_word = new_word+arr[i]+\" \";\r\n        }\r\n        setText(new_word.slice(0,new_word.length-1)); \r\n        props.showalert(\"Removed Extra Spaces from Text\",\"success\");\r\n    }\r\n    const convert_Camel_Case = ()=>{\r\n        let arr = text.split(/\\s+/); \r\n        let new_word=\"\";\r\n        for(let i=0;i<arr.length;i++)\r\n        {   \r\n            if(arr[i].length !== 0)  new_word = new_word+arr[i][0].toUpperCase()+arr[i].slice(1)+\" \";\r\n        }\r\n        setText(new_word.slice(0,new_word.length-1)); \r\n        props.showalert(\"Converted Text to Camel Case\",\"success\");\r\n    }\r\n    const LowerCsClick = ()=>{\r\n       \r\n        let text1 = text.toLowerCase();\r\n        setText(text1);\r\n        props.showalert(\"Converted Text to LowerCase\",\"success\");\r\n        \r\n    };\r\n    const ClearClick = ()=>{\r\n       \r\n        // let text1 = text.toLowerCase();\r\n        setText('');\r\n        props.showalert(\"Cleared Text\",\"success\");\r\n        \r\n    };\r\n    const CopyText = ()=>{\r\n       \r\n       let text = document.getElementById(\"myBox\")\r\n       text.select();\r\n       navigator.clipboard.writeText(text.value);\r\n       props.showalert(\"Copied Text to ClipBoard\",\"success\");\r\n        \r\n    };\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    };\r\nreturn (\r\n    <>\r\n        <div className = \"container\" style={{ color : props.mode === 'dark' ? 'white' : '#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor : props.mode === 'dark' ? 'grey' : 'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div> \r\n        <button disabled ={text.length ===0} disabled ={text.length ===0} className=\"btn btn-primary mx-1 my-1\" onClick={UpperCsClick}>Convert to UpperCase</button>\r\n        <button disabled ={text.length ===0} className=\"btn btn-primary mx-1 my-1\" onClick={LowerCsClick}>Convert to LowerCase</button>\r\n        <button disabled ={text.length ===0}  className=\"btn btn-primary mx-1 my-1\" onClick={ClearClick}>Clear Text</button>\r\n        <button disabled ={text.length ===0} className=\"btn btn-primary mx-1 my-1\" onClick={CopyText}>Copy Text</button>\r\n        <button disabled ={text.length ===0} className=\"btn btn-primary mx-1 my-1\" onClick={remove_Extra_Spaces}>Remove Extra Spaces</button>\r\n        <button disabled ={text.length ===0} className=\"btn btn-primary mx-1 my-1\" onClick={convert_Camel_Case}>Convert to Camel Case</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{ color : props.mode === 'light' ? '#042743' : 'white'}}>\r\n        <h2> Your Text Summary</h2>\r\n        <p> {wordCount(text)} words and {text.length} characters</p>\r\n        <p> {0.008 * wordCount(text)} minutes required to read the above entered text</p>\r\n        <h2>Text Preview</h2>\r\n        <p>{text.length>0 ? text : \"Enter Something in the TextBox above to Preview it here\"}</p>\r\n        </div>\r\n        </>\r\n)\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const to_Capital = (word)=>\r\n    {\r\n       \r\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase(); \r\n    }\r\n    return (\r\n       <div style={{height : \"45px\"}}>\r\n           {props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{to_Capital(props.alert.type)}</strong> : {props.alert.msg}\r\n              \r\n                 </div>}\r\n       </div>\r\n        \r\n    )\r\n}\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import About from './components/About';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message,type)=>\n  {\n    setalert({\n      msg : message,\n      type : type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n  const toggleMode = ()=>\n  {                       // to change the current set mode \n    if(mode === 'dark')\n    {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode has been Enabled\",\"success\");\n    }\n    \n    else{\n    setMode('dark');\n    document.body.style.backgroundColor='#042743';\n    showAlert(\"Dark Mode has been Enabled\",\"success\");\n    }\n  }\n  return (\n   <>\n    {/* <Router> */}\n   <Navbar title = \"TextUtils Application\" mode={mode} toggleMode={toggleMode} aboutText = \"About TextUtils\"/>\n   \n   <strong><Alert alert={alert} /> </strong>\n   <div className=\"container my-3\">\n          \n          {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm heading=\"Enter your text in the Box\" mode={mode} showalert={showAlert}/>\n          {/* </Route>\n        </Switch> */}\n       </div>\n   {/* </Router> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}